from utils.vram_usage import VRAMUsage


def estimate_vram(
    num_params: int,  # 模型参数总数
    batch_size: int,  # 批量大小
    layer_count: int,  # 网络层数
    hidden_dim: int,  # 每层的隐藏维度
    optimizer: str = "adam",  # 选择优化器 "sgd" 或 "adam"
    precision: str = "fp32",  # 计算精度 "fp32" 或 "fp16"
) -> VRAMUsage:
    """this function is generated by GPT-4

    not sure if it works
    """
    bytes_per_param = 4 if precision == "fp32" else 2

    # 计算参数显存
    param_memory = num_params * bytes_per_param  # 权重
    grad_memory = num_params * bytes_per_param  # 梯度

    # 计算优化器状态显存
    if optimizer == "adam":
        optimizer_memory = num_params * bytes_per_param * 3  # Adam 需要额外存储一阶与二阶矩估计
    else:
        optimizer_memory = num_params * bytes_per_param  # SGD 仅存储梯度

    # 计算激活显存（大致估算）
    activation_memory = (
        batch_size * layer_count * hidden_dim * bytes_per_param * 5
    )  # 经验上 5 倍隐藏层大小

    # 总显存消耗
    total_memory = param_memory + grad_memory + optimizer_memory + activation_memory

    return VRAMUsage(
        param_memory=param_memory,
        grad_memory=grad_memory,
        optimizer_memory=optimizer_memory,
        activation_memory=activation_memory,
        total_memory=total_memory,
    )
